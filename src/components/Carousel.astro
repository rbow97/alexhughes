---
import { urlFor } from '../utils/image';
import type { FlattenedPhotosProps } from '../utils/sortedPhotos';
import { currentAlbum } from '../stores/selectedPhotoRefStore';

interface Props {
  photos: FlattenedPhotosProps[];
}

const { photos } = Astro.props;

---

<image-carousel class="grow">
  <ul class="gallery" data-photos={JSON.stringify(photos)}>
    {
      photos.map((photo, index) => (
        <li data-id={index}>
            <img src={urlFor(photo.image).url()} />
        </li>
      ))
    }
  </ul>
  <!-- <div class="p-4 md:p-7 flex justify-between mt-auto">
    <h2 class="text-[18px] md:text-[32px]">
      {photos[centralPhotoIndex].albumTitle}
    </h2>
    <p class="flex gap-7 md:gap-14 text-[18px] md:text-[32px]">
      <span>{currentAlbum.albumLength}</span> <span>{album?.centralPhotoInAlbumIndex}</span>
    </p>
  </div> -->
</image-carousel>

<style>
  .gallery {
    max-height: 700px;
    display: flex;
    scroll-snap-type: both mandatory;
    
    /* mobile */
    margin-top: 32px;
    height: fit-content;
    align-items: center;
    overflow-x: scroll;

    /* Hide scrollbar for Chrome, Safari and Opera */
    &::-webkit-scrollbar {
      display: none;
    }

    /* Hide scrollbar for IE, Edge and Firefox */
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */

    @media (min-width: 767px) {
      height: 100%;
      overflow-x: hidden;
    }

  }

  li {
    height: 100%;
    flex-shrink: 0;
    padding-left: 10px;
    position: relative;

    /* mobile */
    max-width: calc(100vw - 30px);
    scroll-snap-align: start;
    
    @media (min-width: 767px) {
      max-width: unset;
      width: 100vw;
      scroll-snap-align: center;
      padding-left: 0px;
      & img {
        transition: all ease-in-out 750ms;
        object-fit: contain;
        height: 100%;
        max-width: 90vw;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        
      }

    }

  }

  .is-next {
    z-index: 1;

    @media (min-width: 767px) {  
      & img {
        cursor: pointer;
        left: 0%;
        transform: translateX(-30px);
      }
    }
  }

  .is-previous {
    z-index: 1;

    @media (min-width: 767px) {
      & img {
        cursor: pointer;
        left: 100%;
        transform: translateX(calc(-100% + 30px));
      }

    }
  }
</style>

<script>
  import { selectedPhotoRef, selectedPhotoIndex, currentAlbum } from '../stores/selectedPhotoRefStore';
  import type { Photo } from '../utils/sanity';
import type { FlattenedPhotosProps } from '../utils/sortedPhotos';

  class ImageCarousel extends HTMLElement {
    constructor() {
      super();

      const slides = this.querySelectorAll<HTMLLIElement>('.gallery > li');
      const listElement: HTMLUListElement = this.querySelector(".gallery")!;

      this.onSlideClick = this.onSlideClick.bind(this);

      const json = listElement.dataset.photos;
        if (!json) return;

      const photos: FlattenedPhotosProps[] = JSON.parse(json);

      // pass index into each slide click
      // set current index
      // subscribe to current index
      // set current album length based on photo index

      selectedPhotoIndex.subscribe((index) => {
          const albumLength = photos.filter(
        (photo) => photo.albumTitle === photos[index]?.albumTitle
      ).length

        // Get the album title of the central photo
        const centralPhotoAlbumTitle = photos[index]?.albumTitle;

        // Find all photos with the same album title
        const photosWithSameAlbumTitle = photos.filter(
          (photo) => photo.albumTitle === centralPhotoAlbumTitle
        );

        // Find the position of the central photo within the subset of photos with the same album title
        const centralPhotoIndexInAlbum = photosWithSameAlbumTitle.findIndex(
          (photo) => photo._key === photos[index]?._key
        );

        currentAlbum.set({albumLength: albumLength, centralPhotoInAlbumIndex: centralPhotoIndexInAlbum + 1})
      })

      // Find the index of the clicked photo from /gallery
      selectedPhotoRef.subscribe(ref => {
        if(ref) {
          const currentPhoto = ref
          ? photos.findIndex((photo: Photo) => photo._key === ref)
          : 0;

          selectedPhotoIndex.set(currentPhoto);
          
          slides.forEach((slide, index) => {
            if (index === currentPhoto) {
              slide.scrollIntoView();
              slide.classList.add('is-current');
              slide.nextElementSibling?.classList.add('is-next');
              slide.previousElementSibling?.classList.add('is-previous');
            }
          })
        } else {
          slides.forEach((slide, index) => {
            if (index === 0) {
              slide.classList.add('is-current');
              slide.nextElementSibling?.classList.add('is-next');
            }
          })
        }
      })

      const albumLength = photos.filter((photo: FlattenedPhotosProps) => photo.albumTitle === photos[0]?.albumTitle).length
      currentAlbum.set({albumLength, centralPhotoInAlbumIndex: 1})

      slides.forEach((slide, index) => {
        slide.addEventListener('click', (e) => this.onSlideClick(e, index));
      });
    }

    // clean up when element is removed
    disconnectedCallback() {
      const slides = this.querySelectorAll<HTMLLIElement>('.gallery > li');
      slides.forEach((slide) => slide.removeEventListener('click', this.onSlideClick));
    }

    onSlideClick(e: Event, index?: number) {
      // Set the current photo index
      selectedPhotoIndex.set(index!);

      // reset everything to start again
      this.querySelector('.is-previous')?.classList.remove('is-previous');
      this.querySelector('.is-current')?.classList.remove('is-current');
      this.querySelector('.is-next')?.classList.remove('is-next');

      // add the latest correct classes
      const currentSlide = e.currentTarget as HTMLLIElement;
      currentSlide.classList.add('is-current');
      currentSlide.nextElementSibling?.classList.add('is-next');
      currentSlide.previousElementSibling?.classList.add('is-previous');
      currentSlide.scrollIntoView({behavior: 'smooth'});
    }
  }

  customElements.define('image-carousel', ImageCarousel);
</script>