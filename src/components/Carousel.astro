---
import { urlFor } from '../utils/image';
import type { FlattenedPhotosProps } from '../utils/sortedPhotos';

interface Props {
  photos: FlattenedPhotosProps[];
}

const { photos } = Astro.props;

---

<image-carousel class="grow">
  <ul class="gallery" data-photo-urls={JSON.stringify(photos)}>
    {
      photos.map((photo, index) => (
        <li data-id={index}>
            <img src={urlFor(photo.image).url()} />
        </li>
      ))
    }
  </ul>
</image-carousel>

<style>
  .gallery {
    max-height: 700px;
    height: 100%;
    padding: 1rem;
    gap: 30px;
    overflow-x: hidden;
    scroll-snap-type: both mandatory;
    display: flex;
  }

  li {
    width: 100vw;
    height: 100%;
    flex-shrink: 0;
    scroll-snap-align: center;
    border-radius: 3px;
    font-size: 0;
    position: relative;
    
    & img {
      transition: all ease-in-out 500ms;
      object-fit: contain;
      height: 100%;
      max-width: none;
      position: absolute;
      left: 50%;
      transform: translateX(-50%);

    }

  }

  .is-current {
    padding: 0px 30px;
    /* tweak */
  }

  .is-next {
    z-index: 1;

    & img {
      cursor: pointer;
      left: 0%;
      transform: translateX(-60px);
    }
  }

  .is-previous {
    z-index: 1;

    & img {
      cursor: pointer;
      left: 100%;
      transform: translateX(calc(-100% + 60px));
    }
  }
</style>

<script>
  import { selectedPhotoRef } from '../stores/selectedPhotoRefStore';
  import type { Photo } from '../utils/sanity';

  class ImageCarousel extends HTMLElement {
    constructor() {
      super();

      const slides = this.querySelectorAll<HTMLLIElement>('.gallery > li');
      const listElement: HTMLUListElement = this.querySelector(".gallery")!;

      this.onSlideClick = this.onSlideClick.bind(this);

      const json = listElement.dataset.photoUrls;
        if (!json) return;

      const photoUrls = JSON.parse(json);

      // Find the index of the clicked photo from /gallery
      selectedPhotoRef.subscribe(ref => {
        if(ref) {
          const currentPhoto = ref
          ? photoUrls.findIndex((photo: Photo) => photo._key === ref)
          : 0;

          
          slides.forEach((slide, index) => {
            if (index === currentPhoto) {
              slide.scrollIntoView();
              slide.classList.add('is-current');
              slide.nextElementSibling?.classList.add('is-next');
              slide.previousElementSibling?.classList.add('is-previous');
            }
          })
        } else {
          slides.forEach((slide, index) => {
            if (index === 0) {
              slide.classList.add('is-current');
              slide.nextElementSibling?.classList.add('is-next');
            }
          })
        }
      })

      slides.forEach((slide) => {
        slide.addEventListener('click', this.onSlideClick);
      });
    }

    // clean up when element is removed
    disconnectedCallback() {
      const slides = this.querySelectorAll<HTMLLIElement>('.gallery > li');
      slides.forEach((slide) => slide.removeEventListener('click', this.onSlideClick));
    }

    onSlideClick(e: Event) {
      // reset everything to start again
      this.querySelector('.is-previous')?.classList.remove('is-previous');
      this.querySelector('.is-current')?.classList.remove('is-current');
      this.querySelector('.is-next')?.classList.remove('is-next');

      // add the latest correct classes
      const currentSlide = e.currentTarget as HTMLLIElement;
      currentSlide.classList.add('is-current');
      currentSlide.nextElementSibling?.classList.add('is-next');
      currentSlide.previousElementSibling?.classList.add('is-previous');
      currentSlide.scrollIntoView({behavior: 'smooth'});
    }
  }

  customElements.define('image-carousel', ImageCarousel);
</script>
